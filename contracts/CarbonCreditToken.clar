(define-fungible-token carbon-credit u1000000000)

(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-NOT-VERIFIED u102)
(define-constant ERR-INVALID-METADATA u103)
(define-constant ERR-INSUFFICIENT-BALANCE u104)
(define-constant ERR-MAX-SUPPLY-EXCEEDED u105)
(define-constant ERR-TRANSFER-FAILED u106)
(define-constant ERR-MINT-PAUSED u107)
(define-constant ERR-BURN-PAUSED u108)
(define-constant ERR-INVALID-RECIPIENT u109)
(define-constant ERR-INVALID-ISSUER u110)
(define-constant ERR-ALREADY-ISSUED u111)
(define-constant ERR-INVALID-OFFSET u112)
(define-constant ERR-INVALID-TIMESTAMP u113)
(define-constant ERR-INVALID-LOCATION u114)
(define-constant ERR-INVALID-PROJECT-TYPE u115)
(define-constant ERR-INVALID-VERIFIER u116)
(define-constant ERR-VERIFICATION-FAILED u117)
(define-constant ERR-INVALID-STATUS u118)
(define-constant ERR-INVALID-UPDATE u119)
(define-constant ERR-MAX-ISSUERS-EXCEEDED u120)
(define-constant ERR-INVALID-FEE u121)
(define-constant ERR-FEE-TRANSFER-FAILED u122)
(define-constant ERR-INVALID-GRACE-PERIOD u123)
(define-constant ERR-INVALID-RETIREMENT-REASON u124)

(define-data-var token-uri (string-utf8 256) "https://example.com/carbon-credit-metadata.json")
(define-data-var total-supply uint u0)
(define-data-var mint-paused bool false)
(define-data-var burn-paused bool false)
(define-data-var admin principal tx-sender)
(define-data-var issuance-fee uint u1000)
(define-data-var max-issuers uint u100)
(define-data-var issuer-count uint u0)
(define-data-var grace-period uint u144)

(define-map balances principal uint)
(define-map allowances { owner: principal, spender: principal } uint)
(define-map issuers principal bool)
(define-map credit-metadata uint { offset-amount: uint, timestamp: uint, location: (string-utf8 100), project-type: (string-utf8 50), verifier: principal, status: bool })
(define-map credit-retirements uint { reason: (string-utf8 200), timestamp: uint, retiree: principal })

(define-trait verifier-trait
  (
    (verify-offset (uint uint (string-utf8 100) (string-utf8 50)) (response bool uint))
  )
)

(define-read-only (get-balance (account principal))
  (default-to u0 (map-get? balances account))
)

(define-read-only (get-total-supply)
  (ok (var-get total-supply))
)

(define-read-only (get-name)
  (ok "Carbon Credit")
)

(define-read-only (get-symbol)
  (ok "CCREDIT")
)

(define-read-only (get-decimals)
  (ok u6)
)

(define-read-only (get-token-uri)
  (ok (var-get token-uri))
)

(define-read-only (get-allowance (owner principal) (spender principal))
  (default-to u0 (map-get? allowances { owner: owner, spender: spender }))
)

(define-read-only (get-credit-metadata (credit-id uint))
  (map-get? credit-metadata credit-id)
)

(define-read-only (get-credit-retirement (credit-id uint))
  (map-get? credit-retirements credit-id)
)

(define-read-only (is-issuer (account principal))
  (default-to false (map-get? issuers account))
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok true)
    (err ERR-INVALID-AMOUNT))
)

(define-private (validate-recipient (recipient principal))
  (if (not (is-eq recipient 'SP000000000000000000002Q6VF78))
    (ok true)
    (err ERR-INVALID-RECIPIENT))
)

(define-private (validate-issuer (issuer principal))
  (if (is-issuer issuer)
    (ok true)
    (err ERR-INVALID-ISSUER))
)

(define-private (validate-metadata (offset-amount uint) (location (string-utf8 100)) (project-type (string-utf8 50)))
  (if (and (> offset-amount u0) (> (len location) u0) (> (len project-type) u0))
    (ok true)
    (err ERR-INVALID-METADATA))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
    (ok true)
    (err ERR-INVALID-TIMESTAMP))
)

(define-private (validate-location (loc (string-utf8 100)))
  (if (and (> (len loc) u0) (<= (len loc) u100))
    (ok true)
    (err ERR-INVALID-LOCATION))
)

(define-private (validate-project-type (ptype (string-utf8 50)))
  (if (or (is-eq ptype "forest") (is-eq ptype "renewable") (is-eq ptype "soil"))
    (ok true)
    (err ERR-INVALID-PROJECT-TYPE))
)

(define-private (validate-grace-period (period uint))
  (if (<= period u1440)
    (ok true)
    (err ERR-INVALID-GRACE-PERIOD))
)

(define-private (validate-retirement-reason (reason (string-utf8 200)))
  (if (> (len reason) u0)
    (ok true)
    (err ERR-INVALID-RETIREMENT-REASON))
)

(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))
  (begin
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= (get-balance sender) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount sender recipient))
    (map-set balances sender (- (get-balance sender) amount))
    (map-set balances recipient (+ (get-balance recipient) amount))
    (print { event: "transfer", amount: amount, sender: sender, recipient: recipient, memo: memo })
    (ok true)
  )
)

(define-public (approve (spender principal) (amount uint))
  (begin
    (try! (validate-amount amount))
    (map-set allowances { owner: tx-sender, spender: spender } amount)
    (print { event: "approve", owner: tx-sender, spender: spender, amount: amount })
    (ok true)
  )
)

(define-public (transfer-from (owner principal) (recipient principal) (amount uint))
  (let ((allowance (get-allowance owner tx-sender)))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (asserts! (>= allowance amount) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= (get-balance owner) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount owner recipient))
    (map-set balances owner (- (get-balance owner) amount))
    (map-set balances recipient (+ (get-balance recipient) amount))
    (map-set allowances { owner: owner, spender: tx-sender } (- allowance amount))
    (print { event: "transfer-from", owner: owner, spender: tx-sender, recipient: recipient, amount: amount })
    (ok true)
  )
)

(define-public (mint (amount uint) (recipient principal) (offset-amount uint) (location (string-utf8 100)) (project-type (string-utf8 50)) (verifier principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (var-get mint-paused)) (err ERR-MINT-PAUSED))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (try! (validate-metadata offset-amount location project-type))
    (try! (validate-project-type project-type))
    (try! (validate-location location))
    (asserts! (<= (+ (var-get total-supply) amount) (ft-get-supply carbon-credit)) (err ERR-MAX-SUPPLY-EXCEEDED))
    (try! (ft-mint? carbon-credit amount recipient))
    (var-set total-supply (+ (var-get total-supply) amount))
    (let ((credit-id (var-get total-supply)))
      (map-set credit-metadata credit-id { offset-amount: offset-amount, timestamp: block-height, location: location, project-type: project-type, verifier: verifier, status: true })
    )
    (try! (stx-transfer? (var-get issuance-fee) tx-sender (var-get admin)))
    (print { event: "mint", amount: amount, recipient: recipient })
    (ok true)
  )
)

(define-public (burn (amount uint) (reason (string-utf8 200)))
  (begin
    (asserts! (not (var-get burn-paused)) (err ERR-BURN-PAUSED))
    (try! (validate-amount amount))
    (try! (validate-retirement-reason reason))
    (asserts! (>= (get-balance tx-sender) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-burn? carbon-credit amount tx-sender))
    (map-set balances tx-sender (- (get-balance tx-sender) amount))
    (var-set total-supply (- (var-get total-supply) amount))
    (let ((credit-id (var-get total-supply)))
      (map-set credit-retirements credit-id { reason: reason, timestamp: block-height, retiree: tx-sender })
    )
    (print { event: "burn", amount: amount, owner: tx-sender, reason: reason })
    (ok true)
  )
)

(define-public (add-issuer (new-issuer principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-recipient new-issuer))
    (asserts! (not (is-issuer new-issuer)) (err ERR-ALREADY-ISSUED))
    (asserts! (< (var-get issuer-count) (var-get max-issuers)) (err ERR-MAX-ISSUERS-EXCEEDED))
    (map-set issuers new-issuer true)
    (var-set issuer-count (+ (var-get issuer-count) u1))
    (print { event: "add-issuer", issuer: new-issuer })
    (ok true)
  )
)

(define-public (remove-issuer (issuer principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-issuer issuer) (err ERR-INVALID-ISSUER))
    (map-delete issuers issuer)
    (var-set issuer-count (- (var-get issuer-count) u1))
    (print { event: "remove-issuer", issuer: issuer })
    (ok true)
  )
)

(define-public (set-issuance-fee (new-fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (> new-fee u0) (err ERR-INVALID-FEE))
    (var-set issuance-fee new-fee)
    (ok true)
  )
)

(define-public (pause-mint)
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set mint-paused true)
    (ok true)
  )
)

(define-public (unpause-mint)
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set mint-paused false)
    (ok true)
  )
)

(define-public (pause-burn)
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set burn-paused true)
    (ok true)
  )
)

(define-public (unpause-burn)
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set burn-paused false)
    (ok true)
  )
)

(define-public (set-token-uri (new-uri (string-utf8 256)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set token-uri new-uri)
    (ok true)
  )
)

(define-public (set-grace-period (new-period uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-grace-period new-period))
    (var-set grace-period new-period)
    (ok true)
  )
)

(define-public (verify-and-mint (amount uint) (recipient principal) (offset-amount uint) (location (string-utf8 100)) (project-type (string-utf8 50)) (verifier principal))
  (begin
    (asserts! (is-issuer tx-sender) (err ERR-NOT-AUTHORIZED))
    (match (contract-call? verifier verify-offset amount offset-amount location project-type)
      (ok verified)
        (if verified
          (try! (mint amount recipient offset-amount location project-type verifier))
          (err ERR-VERIFICATION-FAILED))
      (err e) (err ERR-VERIFICATION-FAILED)
    )
  )
)